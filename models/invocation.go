// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Invocation invocation
//
// swagger:model Invocation
type Invocation struct {

	// enable reap
	EnableReap bool `json:"enableReap,omitempty"`

	// func name
	// Required: true
	FuncName *string `json:"func_name"`

	// load mincore
	LoadMincore []int64 `json:"loadMincore"`

	// mincore
	Mincore *int64 `json:"mincore,omitempty"`

	// mincore size
	MincoreSize int64 `json:"mincore_size,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// overlay regions
	OverlayRegions bool `json:"overlay_regions,omitempty"`

	// params
	Params string `json:"params,omitempty"`

	// ss Id
	SsID string `json:"ssId,omitempty"`

	// use mem file
	UseMemFile bool `json:"use_mem_file,omitempty"`

	// use ws file
	UseWsFile bool `json:"use_ws_file,omitempty"`

	// vm Id
	VMID string `json:"vmId,omitempty"`

	// vmm load ws
	VmmLoadWs bool `json:"vmm_load_ws,omitempty"`

	// ws file direct io
	WsFileDirectIo bool `json:"wsFileDirectIo,omitempty"`

	// ws single read
	WsSingleRead bool `json:"wsSingleRead,omitempty"`
}

// Validate validates this invocation
func (m *Invocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFuncName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Invocation) validateFuncName(formats strfmt.Registry) error {

	if err := validate.Required("func_name", "body", m.FuncName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this invocation based on context it is used
func (m *Invocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Invocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Invocation) UnmarshalBinary(b []byte) error {
	var res Invocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

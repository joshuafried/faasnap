// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostInvocationsHandlerFunc turns a function with the right signature into a post invocations handler
type PostInvocationsHandlerFunc func(PostInvocationsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostInvocationsHandlerFunc) Handle(params PostInvocationsParams) middleware.Responder {
	return fn(params)
}

// PostInvocationsHandler interface for that can handle valid post invocations params
type PostInvocationsHandler interface {
	Handle(PostInvocationsParams) middleware.Responder
}

// NewPostInvocations creates a new http.Handler for the post invocations operation
func NewPostInvocations(ctx *middleware.Context, handler PostInvocationsHandler) *PostInvocations {
	return &PostInvocations{Context: ctx, Handler: handler}
}

/*
	PostInvocations swagger:route POST /invocations postInvocations

Post an invocation
*/
type PostInvocations struct {
	Context *middleware.Context
	Handler PostInvocationsHandler
}

func (o *PostInvocations) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostInvocationsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostInvocationsBadRequestBody post invocations bad request body
//
// swagger:model PostInvocationsBadRequestBody
type PostInvocationsBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post invocations bad request body
func (o *PostInvocationsBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post invocations bad request body based on context it is used
func (o *PostInvocationsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostInvocationsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInvocationsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostInvocationsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostInvocationsOKBody post invocations o k body
//
// swagger:model PostInvocationsOKBody
type PostInvocationsOKBody struct {

	// duration
	Duration float64 `json:"duration,omitempty"`

	// result
	Result string `json:"result,omitempty"`

	// trace Id
	TraceID string `json:"traceId,omitempty"`

	// vm Id
	VMID string `json:"vmId,omitempty"`
}

// Validate validates this post invocations o k body
func (o *PostInvocationsOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post invocations o k body based on context it is used
func (o *PostInvocationsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostInvocationsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInvocationsOKBody) UnmarshalBinary(b []byte) error {
	var res PostInvocationsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

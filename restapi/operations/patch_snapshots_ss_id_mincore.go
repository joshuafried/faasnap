// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PatchSnapshotsSsIDMincoreHandlerFunc turns a function with the right signature into a patch snapshots ss ID mincore handler
type PatchSnapshotsSsIDMincoreHandlerFunc func(PatchSnapshotsSsIDMincoreParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchSnapshotsSsIDMincoreHandlerFunc) Handle(params PatchSnapshotsSsIDMincoreParams) middleware.Responder {
	return fn(params)
}

// PatchSnapshotsSsIDMincoreHandler interface for that can handle valid patch snapshots ss ID mincore params
type PatchSnapshotsSsIDMincoreHandler interface {
	Handle(PatchSnapshotsSsIDMincoreParams) middleware.Responder
}

// NewPatchSnapshotsSsIDMincore creates a new http.Handler for the patch snapshots ss ID mincore operation
func NewPatchSnapshotsSsIDMincore(ctx *middleware.Context, handler PatchSnapshotsSsIDMincoreHandler) *PatchSnapshotsSsIDMincore {
	return &PatchSnapshotsSsIDMincore{Context: ctx, Handler: handler}
}

/*
	PatchSnapshotsSsIDMincore swagger:route PATCH /snapshots/{ssId}/mincore patchSnapshotsSsIdMincore

Change mincore state
*/
type PatchSnapshotsSsIDMincore struct {
	Context *middleware.Context
	Handler PatchSnapshotsSsIDMincoreHandler
}

func (o *PatchSnapshotsSsIDMincore) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchSnapshotsSsIDMincoreParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatchSnapshotsSsIDMincoreBadRequestBody patch snapshots ss ID mincore bad request body
//
// swagger:model PatchSnapshotsSsIDMincoreBadRequestBody
type PatchSnapshotsSsIDMincoreBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this patch snapshots ss ID mincore bad request body
func (o *PatchSnapshotsSsIDMincoreBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this patch snapshots ss ID mincore bad request body based on context it is used
func (o *PatchSnapshotsSsIDMincoreBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchSnapshotsSsIDMincoreBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchSnapshotsSsIDMincoreBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PatchSnapshotsSsIDMincoreBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatchSnapshotsSsIDMincoreBody patch snapshots ss ID mincore body
//
// swagger:model PatchSnapshotsSsIDMincoreBody
type PatchSnapshotsSsIDMincoreBody struct {

	// drop ws cache
	DropWsCache bool `json:"drop_ws_cache,omitempty"`

	// from records size
	FromRecordsSize int64 `json:"from_records_size,omitempty"`

	// inactive ws
	InactiveWs bool `json:"inactive_ws,omitempty"`

	// interval threshold
	IntervalThreshold int64 `json:"interval_threshold,omitempty"`

	// mincore cache
	MincoreCache []int64 `json:"mincore_cache"`

	// size threshold
	SizeThreshold int64 `json:"size_threshold,omitempty"`

	// to ws file
	ToWsFile string `json:"to_ws_file,omitempty"`

	// trim regions
	TrimRegions bool `json:"trim_regions,omitempty"`

	// zero ws
	ZeroWs bool `json:"zero_ws,omitempty"`
}

// Validate validates this patch snapshots ss ID mincore body
func (o *PatchSnapshotsSsIDMincoreBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this patch snapshots ss ID mincore body based on context it is used
func (o *PatchSnapshotsSsIDMincoreBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchSnapshotsSsIDMincoreBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchSnapshotsSsIDMincoreBody) UnmarshalBinary(b []byte) error {
	var res PatchSnapshotsSsIDMincoreBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

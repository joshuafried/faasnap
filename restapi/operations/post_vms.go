// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostVmsHandlerFunc turns a function with the right signature into a post vms handler
type PostVmsHandlerFunc func(PostVmsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostVmsHandlerFunc) Handle(params PostVmsParams) middleware.Responder {
	return fn(params)
}

// PostVmsHandler interface for that can handle valid post vms params
type PostVmsHandler interface {
	Handle(PostVmsParams) middleware.Responder
}

// NewPostVms creates a new http.Handler for the post vms operation
func NewPostVms(ctx *middleware.Context, handler PostVmsHandler) *PostVms {
	return &PostVms{Context: ctx, Handler: handler}
}

/*
	PostVms swagger:route POST /vms postVms

Create a new VM
*/
type PostVms struct {
	Context *middleware.Context
	Handler PostVmsHandler
}

func (o *PostVms) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostVmsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostVmsBadRequestBody post vms bad request body
//
// swagger:model PostVmsBadRequestBody
type PostVmsBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post vms bad request body
func (o *PostVmsBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post vms bad request body based on context it is used
func (o *PostVmsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostVmsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostVmsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostVmsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostVmsBody post vms body
//
// swagger:model PostVmsBody
type PostVmsBody struct {

	// func name
	FuncName string `json:"func_name,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// ss Id
	SsID string `json:"ssId,omitempty"`
}

// Validate validates this post vms body
func (o *PostVmsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post vms body based on context it is used
func (o *PostVmsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostVmsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostVmsBody) UnmarshalBinary(b []byte) error {
	var res PostVmsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

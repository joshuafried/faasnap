// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFaasnapAPI creates a new Faasnap instance
func NewFaasnapAPI(spec *loads.Document) *FaasnapAPI {
	return &FaasnapAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		DeleteSnapshotsSsIDReapHandler: DeleteSnapshotsSsIDReapHandlerFunc(func(params DeleteSnapshotsSsIDReapParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteSnapshotsSsIDReap has not yet been implemented")
		}),
		DeleteVmsVMIDHandler: DeleteVmsVMIDHandlerFunc(func(params DeleteVmsVMIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteVmsVMID has not yet been implemented")
		}),
		GetFunctionsHandler: GetFunctionsHandlerFunc(func(params GetFunctionsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetFunctions has not yet been implemented")
		}),
		GetMetricsHandler: GetMetricsHandlerFunc(func(params GetMetricsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetMetrics has not yet been implemented")
		}),
		GetSnapshotsSsIDMincoreHandler: GetSnapshotsSsIDMincoreHandlerFunc(func(params GetSnapshotsSsIDMincoreParams) middleware.Responder {
			return middleware.NotImplemented("operation GetSnapshotsSsIDMincore has not yet been implemented")
		}),
		GetSnapshotsSsIDReapHandler: GetSnapshotsSsIDReapHandlerFunc(func(params GetSnapshotsSsIDReapParams) middleware.Responder {
			return middleware.NotImplemented("operation GetSnapshotsSsIDReap has not yet been implemented")
		}),
		GetUIHandler: GetUIHandlerFunc(func(params GetUIParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUI has not yet been implemented")
		}),
		GetUIDataHandler: GetUIDataHandlerFunc(func(params GetUIDataParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUIData has not yet been implemented")
		}),
		GetVmsHandler: GetVmsHandlerFunc(func(params GetVmsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetVms has not yet been implemented")
		}),
		GetVmsVMIDHandler: GetVmsVMIDHandlerFunc(func(params GetVmsVMIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetVmsVMID has not yet been implemented")
		}),
		PatchSnapshotsSsIDHandler: PatchSnapshotsSsIDHandlerFunc(func(params PatchSnapshotsSsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchSnapshotsSsID has not yet been implemented")
		}),
		PatchSnapshotsSsIDMincoreHandler: PatchSnapshotsSsIDMincoreHandlerFunc(func(params PatchSnapshotsSsIDMincoreParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchSnapshotsSsIDMincore has not yet been implemented")
		}),
		PatchSnapshotsSsIDReapHandler: PatchSnapshotsSsIDReapHandlerFunc(func(params PatchSnapshotsSsIDReapParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchSnapshotsSsIDReap has not yet been implemented")
		}),
		PostFunctionsHandler: PostFunctionsHandlerFunc(func(params PostFunctionsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostFunctions has not yet been implemented")
		}),
		PostInvocationsHandler: PostInvocationsHandlerFunc(func(params PostInvocationsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostInvocations has not yet been implemented")
		}),
		PostSnapshotsHandler: PostSnapshotsHandlerFunc(func(params PostSnapshotsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostSnapshots has not yet been implemented")
		}),
		PostSnapshotsSsIDMincoreHandler: PostSnapshotsSsIDMincoreHandlerFunc(func(params PostSnapshotsSsIDMincoreParams) middleware.Responder {
			return middleware.NotImplemented("operation PostSnapshotsSsIDMincore has not yet been implemented")
		}),
		PostVmmsHandler: PostVmmsHandlerFunc(func(params PostVmmsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostVmms has not yet been implemented")
		}),
		PostVmsHandler: PostVmsHandlerFunc(func(params PostVmsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostVms has not yet been implemented")
		}),
		PutNetIfacesNamespaceHandler: PutNetIfacesNamespaceHandlerFunc(func(params PutNetIfacesNamespaceParams) middleware.Responder {
			return middleware.NotImplemented("operation PutNetIfacesNamespace has not yet been implemented")
		}),
		PutSnapshotsHandler: PutSnapshotsHandlerFunc(func(params PutSnapshotsParams) middleware.Responder {
			return middleware.NotImplemented("operation PutSnapshots has not yet been implemented")
		}),
		PutSnapshotsSsIDMincoreHandler: PutSnapshotsSsIDMincoreHandlerFunc(func(params PutSnapshotsSsIDMincoreParams) middleware.Responder {
			return middleware.NotImplemented("operation PutSnapshotsSsIDMincore has not yet been implemented")
		}),
	}
}

/*FaasnapAPI FaaSnap API */
type FaasnapAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// DeleteSnapshotsSsIDReapHandler sets the operation handler for the delete snapshots ss ID reap operation
	DeleteSnapshotsSsIDReapHandler DeleteSnapshotsSsIDReapHandler
	// DeleteVmsVMIDHandler sets the operation handler for the delete vms VM ID operation
	DeleteVmsVMIDHandler DeleteVmsVMIDHandler
	// GetFunctionsHandler sets the operation handler for the get functions operation
	GetFunctionsHandler GetFunctionsHandler
	// GetMetricsHandler sets the operation handler for the get metrics operation
	GetMetricsHandler GetMetricsHandler
	// GetSnapshotsSsIDMincoreHandler sets the operation handler for the get snapshots ss ID mincore operation
	GetSnapshotsSsIDMincoreHandler GetSnapshotsSsIDMincoreHandler
	// GetSnapshotsSsIDReapHandler sets the operation handler for the get snapshots ss ID reap operation
	GetSnapshotsSsIDReapHandler GetSnapshotsSsIDReapHandler
	// GetUIHandler sets the operation handler for the get UI operation
	GetUIHandler GetUIHandler
	// GetUIDataHandler sets the operation handler for the get UI data operation
	GetUIDataHandler GetUIDataHandler
	// GetVmsHandler sets the operation handler for the get vms operation
	GetVmsHandler GetVmsHandler
	// GetVmsVMIDHandler sets the operation handler for the get vms VM ID operation
	GetVmsVMIDHandler GetVmsVMIDHandler
	// PatchSnapshotsSsIDHandler sets the operation handler for the patch snapshots ss ID operation
	PatchSnapshotsSsIDHandler PatchSnapshotsSsIDHandler
	// PatchSnapshotsSsIDMincoreHandler sets the operation handler for the patch snapshots ss ID mincore operation
	PatchSnapshotsSsIDMincoreHandler PatchSnapshotsSsIDMincoreHandler
	// PatchSnapshotsSsIDReapHandler sets the operation handler for the patch snapshots ss ID reap operation
	PatchSnapshotsSsIDReapHandler PatchSnapshotsSsIDReapHandler
	// PostFunctionsHandler sets the operation handler for the post functions operation
	PostFunctionsHandler PostFunctionsHandler
	// PostInvocationsHandler sets the operation handler for the post invocations operation
	PostInvocationsHandler PostInvocationsHandler
	// PostSnapshotsHandler sets the operation handler for the post snapshots operation
	PostSnapshotsHandler PostSnapshotsHandler
	// PostSnapshotsSsIDMincoreHandler sets the operation handler for the post snapshots ss ID mincore operation
	PostSnapshotsSsIDMincoreHandler PostSnapshotsSsIDMincoreHandler
	// PostVmmsHandler sets the operation handler for the post vmms operation
	PostVmmsHandler PostVmmsHandler
	// PostVmsHandler sets the operation handler for the post vms operation
	PostVmsHandler PostVmsHandler
	// PutNetIfacesNamespaceHandler sets the operation handler for the put net ifaces namespace operation
	PutNetIfacesNamespaceHandler PutNetIfacesNamespaceHandler
	// PutSnapshotsHandler sets the operation handler for the put snapshots operation
	PutSnapshotsHandler PutSnapshotsHandler
	// PutSnapshotsSsIDMincoreHandler sets the operation handler for the put snapshots ss ID mincore operation
	PutSnapshotsSsIDMincoreHandler PutSnapshotsSsIDMincoreHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *FaasnapAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *FaasnapAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *FaasnapAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *FaasnapAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *FaasnapAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *FaasnapAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *FaasnapAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *FaasnapAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *FaasnapAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the FaasnapAPI
func (o *FaasnapAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.DeleteSnapshotsSsIDReapHandler == nil {
		unregistered = append(unregistered, "DeleteSnapshotsSsIDReapHandler")
	}
	if o.DeleteVmsVMIDHandler == nil {
		unregistered = append(unregistered, "DeleteVmsVMIDHandler")
	}
	if o.GetFunctionsHandler == nil {
		unregistered = append(unregistered, "GetFunctionsHandler")
	}
	if o.GetMetricsHandler == nil {
		unregistered = append(unregistered, "GetMetricsHandler")
	}
	if o.GetSnapshotsSsIDMincoreHandler == nil {
		unregistered = append(unregistered, "GetSnapshotsSsIDMincoreHandler")
	}
	if o.GetSnapshotsSsIDReapHandler == nil {
		unregistered = append(unregistered, "GetSnapshotsSsIDReapHandler")
	}
	if o.GetUIHandler == nil {
		unregistered = append(unregistered, "GetUIHandler")
	}
	if o.GetUIDataHandler == nil {
		unregistered = append(unregistered, "GetUIDataHandler")
	}
	if o.GetVmsHandler == nil {
		unregistered = append(unregistered, "GetVmsHandler")
	}
	if o.GetVmsVMIDHandler == nil {
		unregistered = append(unregistered, "GetVmsVMIDHandler")
	}
	if o.PatchSnapshotsSsIDHandler == nil {
		unregistered = append(unregistered, "PatchSnapshotsSsIDHandler")
	}
	if o.PatchSnapshotsSsIDMincoreHandler == nil {
		unregistered = append(unregistered, "PatchSnapshotsSsIDMincoreHandler")
	}
	if o.PatchSnapshotsSsIDReapHandler == nil {
		unregistered = append(unregistered, "PatchSnapshotsSsIDReapHandler")
	}
	if o.PostFunctionsHandler == nil {
		unregistered = append(unregistered, "PostFunctionsHandler")
	}
	if o.PostInvocationsHandler == nil {
		unregistered = append(unregistered, "PostInvocationsHandler")
	}
	if o.PostSnapshotsHandler == nil {
		unregistered = append(unregistered, "PostSnapshotsHandler")
	}
	if o.PostSnapshotsSsIDMincoreHandler == nil {
		unregistered = append(unregistered, "PostSnapshotsSsIDMincoreHandler")
	}
	if o.PostVmmsHandler == nil {
		unregistered = append(unregistered, "PostVmmsHandler")
	}
	if o.PostVmsHandler == nil {
		unregistered = append(unregistered, "PostVmsHandler")
	}
	if o.PutNetIfacesNamespaceHandler == nil {
		unregistered = append(unregistered, "PutNetIfacesNamespaceHandler")
	}
	if o.PutSnapshotsHandler == nil {
		unregistered = append(unregistered, "PutSnapshotsHandler")
	}
	if o.PutSnapshotsSsIDMincoreHandler == nil {
		unregistered = append(unregistered, "PutSnapshotsSsIDMincoreHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *FaasnapAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *FaasnapAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *FaasnapAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *FaasnapAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *FaasnapAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *FaasnapAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the faasnap API
func (o *FaasnapAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *FaasnapAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/snapshots/{ssId}/reap"] = NewDeleteSnapshotsSsIDReap(o.context, o.DeleteSnapshotsSsIDReapHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/vms/{vmId}"] = NewDeleteVmsVMID(o.context, o.DeleteVmsVMIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/functions"] = NewGetFunctions(o.context, o.GetFunctionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/metrics"] = NewGetMetrics(o.context, o.GetMetricsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/snapshots/{ssId}/mincore"] = NewGetSnapshotsSsIDMincore(o.context, o.GetSnapshotsSsIDMincoreHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/snapshots/{ssId}/reap"] = NewGetSnapshotsSsIDReap(o.context, o.GetSnapshotsSsIDReapHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ui"] = NewGetUI(o.context, o.GetUIHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ui/data"] = NewGetUIData(o.context, o.GetUIDataHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vms"] = NewGetVms(o.context, o.GetVmsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vms/{vmId}"] = NewGetVmsVMID(o.context, o.GetVmsVMIDHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/snapshots/{ssId}"] = NewPatchSnapshotsSsID(o.context, o.PatchSnapshotsSsIDHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/snapshots/{ssId}/mincore"] = NewPatchSnapshotsSsIDMincore(o.context, o.PatchSnapshotsSsIDMincoreHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/snapshots/{ssId}/reap"] = NewPatchSnapshotsSsIDReap(o.context, o.PatchSnapshotsSsIDReapHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/functions"] = NewPostFunctions(o.context, o.PostFunctionsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/invocations"] = NewPostInvocations(o.context, o.PostInvocationsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/snapshots"] = NewPostSnapshots(o.context, o.PostSnapshotsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/snapshots/{ssId}/mincore"] = NewPostSnapshotsSsIDMincore(o.context, o.PostSnapshotsSsIDMincoreHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/vmms"] = NewPostVmms(o.context, o.PostVmmsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/vms"] = NewPostVms(o.context, o.PostVmsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/net-ifaces/{namespace}"] = NewPutNetIfacesNamespace(o.context, o.PutNetIfacesNamespaceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/snapshots"] = NewPutSnapshots(o.context, o.PutSnapshotsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/snapshots/{ssId}/mincore"] = NewPutSnapshotsSsIDMincore(o.context, o.PutSnapshotsSsIDMincoreHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *FaasnapAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *FaasnapAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *FaasnapAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *FaasnapAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *FaasnapAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}

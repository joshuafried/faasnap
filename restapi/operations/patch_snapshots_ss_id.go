// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PatchSnapshotsSsIDHandlerFunc turns a function with the right signature into a patch snapshots ss ID handler
type PatchSnapshotsSsIDHandlerFunc func(PatchSnapshotsSsIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchSnapshotsSsIDHandlerFunc) Handle(params PatchSnapshotsSsIDParams) middleware.Responder {
	return fn(params)
}

// PatchSnapshotsSsIDHandler interface for that can handle valid patch snapshots ss ID params
type PatchSnapshotsSsIDHandler interface {
	Handle(PatchSnapshotsSsIDParams) middleware.Responder
}

// NewPatchSnapshotsSsID creates a new http.Handler for the patch snapshots ss ID operation
func NewPatchSnapshotsSsID(ctx *middleware.Context, handler PatchSnapshotsSsIDHandler) *PatchSnapshotsSsID {
	return &PatchSnapshotsSsID{Context: ctx, Handler: handler}
}

/*
	PatchSnapshotsSsID swagger:route PATCH /snapshots/{ssId} patchSnapshotsSsId

Change snapshot state
*/
type PatchSnapshotsSsID struct {
	Context *middleware.Context
	Handler PatchSnapshotsSsIDHandler
}

func (o *PatchSnapshotsSsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchSnapshotsSsIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatchSnapshotsSsIDBadRequestBody patch snapshots ss ID bad request body
//
// swagger:model PatchSnapshotsSsIDBadRequestBody
type PatchSnapshotsSsIDBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this patch snapshots ss ID bad request body
func (o *PatchSnapshotsSsIDBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this patch snapshots ss ID bad request body based on context it is used
func (o *PatchSnapshotsSsIDBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchSnapshotsSsIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchSnapshotsSsIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PatchSnapshotsSsIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatchSnapshotsSsIDBody patch snapshots ss ID body
//
// swagger:model PatchSnapshotsSsIDBody
type PatchSnapshotsSsIDBody struct {

	// dig hole
	DigHole bool `json:"dig_hole,omitempty"`

	// drop cache
	DropCache bool `json:"drop_cache,omitempty"`

	// load cache
	LoadCache bool `json:"load_cache,omitempty"`
}

// Validate validates this patch snapshots ss ID body
func (o *PatchSnapshotsSsIDBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this patch snapshots ss ID body based on context it is used
func (o *PatchSnapshotsSsIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchSnapshotsSsIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchSnapshotsSsIDBody) UnmarshalBinary(b []byte) error {
	var res PatchSnapshotsSsIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

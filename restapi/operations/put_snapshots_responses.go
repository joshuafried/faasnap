// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ucsdsysnet/faasnap/models"
)

// PutSnapshotsOKCode is the HTTP code returned for type PutSnapshotsOK
const PutSnapshotsOKCode int = 200

/*
PutSnapshotsOK OK

swagger:response putSnapshotsOK
*/
type PutSnapshotsOK struct {

	/*
	  In: Body
	*/
	Payload *models.Snapshot `json:"body,omitempty"`
}

// NewPutSnapshotsOK creates PutSnapshotsOK with default headers values
func NewPutSnapshotsOK() *PutSnapshotsOK {

	return &PutSnapshotsOK{}
}

// WithPayload adds the payload to the put snapshots o k response
func (o *PutSnapshotsOK) WithPayload(payload *models.Snapshot) *PutSnapshotsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put snapshots o k response
func (o *PutSnapshotsOK) SetPayload(payload *models.Snapshot) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutSnapshotsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutSnapshotsBadRequestCode is the HTTP code returned for type PutSnapshotsBadRequest
const PutSnapshotsBadRequestCode int = 400

/*
PutSnapshotsBadRequest Invalid request

swagger:response putSnapshotsBadRequest
*/
type PutSnapshotsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *PutSnapshotsBadRequestBody `json:"body,omitempty"`
}

// NewPutSnapshotsBadRequest creates PutSnapshotsBadRequest with default headers values
func NewPutSnapshotsBadRequest() *PutSnapshotsBadRequest {

	return &PutSnapshotsBadRequest{}
}

// WithPayload adds the payload to the put snapshots bad request response
func (o *PutSnapshotsBadRequest) WithPayload(payload *PutSnapshotsBadRequestBody) *PutSnapshotsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put snapshots bad request response
func (o *PutSnapshotsBadRequest) SetPayload(payload *PutSnapshotsBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutSnapshotsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetVmsVMIDHandlerFunc turns a function with the right signature into a get vms VM ID handler
type GetVmsVMIDHandlerFunc func(GetVmsVMIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetVmsVMIDHandlerFunc) Handle(params GetVmsVMIDParams) middleware.Responder {
	return fn(params)
}

// GetVmsVMIDHandler interface for that can handle valid get vms VM ID params
type GetVmsVMIDHandler interface {
	Handle(GetVmsVMIDParams) middleware.Responder
}

// NewGetVmsVMID creates a new http.Handler for the get vms VM ID operation
func NewGetVmsVMID(ctx *middleware.Context, handler GetVmsVMIDHandler) *GetVmsVMID {
	return &GetVmsVMID{Context: ctx, Handler: handler}
}

/*
	GetVmsVMID swagger:route GET /vms/{vmId} getVmsVmId

Describe a VM
*/
type GetVmsVMID struct {
	Context *middleware.Context
	Handler GetVmsVMIDHandler
}

func (o *GetVmsVMID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetVmsVMIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetVmsVMIDBadRequestBody get vms VM ID bad request body
//
// swagger:model GetVmsVMIDBadRequestBody
type GetVmsVMIDBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get vms VM ID bad request body
func (o *GetVmsVMIDBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get vms VM ID bad request body based on context it is used
func (o *GetVmsVMIDBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetVmsVMIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetVmsVMIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetVmsVMIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

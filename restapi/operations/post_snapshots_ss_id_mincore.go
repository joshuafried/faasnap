// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostSnapshotsSsIDMincoreHandlerFunc turns a function with the right signature into a post snapshots ss ID mincore handler
type PostSnapshotsSsIDMincoreHandlerFunc func(PostSnapshotsSsIDMincoreParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostSnapshotsSsIDMincoreHandlerFunc) Handle(params PostSnapshotsSsIDMincoreParams) middleware.Responder {
	return fn(params)
}

// PostSnapshotsSsIDMincoreHandler interface for that can handle valid post snapshots ss ID mincore params
type PostSnapshotsSsIDMincoreHandler interface {
	Handle(PostSnapshotsSsIDMincoreParams) middleware.Responder
}

// NewPostSnapshotsSsIDMincore creates a new http.Handler for the post snapshots ss ID mincore operation
func NewPostSnapshotsSsIDMincore(ctx *middleware.Context, handler PostSnapshotsSsIDMincoreHandler) *PostSnapshotsSsIDMincore {
	return &PostSnapshotsSsIDMincore{Context: ctx, Handler: handler}
}

/*
	PostSnapshotsSsIDMincore swagger:route POST /snapshots/{ssId}/mincore postSnapshotsSsIdMincore

Add mincore layer
*/
type PostSnapshotsSsIDMincore struct {
	Context *middleware.Context
	Handler PostSnapshotsSsIDMincoreHandler
}

func (o *PostSnapshotsSsIDMincore) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostSnapshotsSsIDMincoreParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostSnapshotsSsIDMincoreBadRequestBody post snapshots ss ID mincore bad request body
//
// swagger:model PostSnapshotsSsIDMincoreBadRequestBody
type PostSnapshotsSsIDMincoreBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post snapshots ss ID mincore bad request body
func (o *PostSnapshotsSsIDMincoreBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post snapshots ss ID mincore bad request body based on context it is used
func (o *PostSnapshotsSsIDMincoreBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostSnapshotsSsIDMincoreBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSnapshotsSsIDMincoreBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostSnapshotsSsIDMincoreBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostSnapshotsSsIDMincoreBody post snapshots ss ID mincore body
//
// swagger:model PostSnapshotsSsIDMincoreBody
type PostSnapshotsSsIDMincoreBody struct {

	// from diff
	FromDiff string `json:"fromDiff,omitempty"`

	// position
	Position int64 `json:"position,omitempty"`
}

// Validate validates this post snapshots ss ID mincore body
func (o *PostSnapshotsSsIDMincoreBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post snapshots ss ID mincore body based on context it is used
func (o *PostSnapshotsSsIDMincoreBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostSnapshotsSsIDMincoreBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSnapshotsSsIDMincoreBody) UnmarshalBinary(b []byte) error {
	var res PostSnapshotsSsIDMincoreBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

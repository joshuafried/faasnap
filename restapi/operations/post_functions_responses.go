// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostFunctionsOKCode is the HTTP code returned for type PostFunctionsOK
const PostFunctionsOKCode int = 200

/*
PostFunctionsOK OK

swagger:response postFunctionsOK
*/
type PostFunctionsOK struct {
}

// NewPostFunctionsOK creates PostFunctionsOK with default headers values
func NewPostFunctionsOK() *PostFunctionsOK {

	return &PostFunctionsOK{}
}

// WriteResponse to the client
func (o *PostFunctionsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PostFunctionsBadRequestCode is the HTTP code returned for type PostFunctionsBadRequest
const PostFunctionsBadRequestCode int = 400

/*
PostFunctionsBadRequest Invalid request

swagger:response postFunctionsBadRequest
*/
type PostFunctionsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *PostFunctionsBadRequestBody `json:"body,omitempty"`
}

// NewPostFunctionsBadRequest creates PostFunctionsBadRequest with default headers values
func NewPostFunctionsBadRequest() *PostFunctionsBadRequest {

	return &PostFunctionsBadRequest{}
}

// WithPayload adds the payload to the post functions bad request response
func (o *PostFunctionsBadRequest) WithPayload(payload *PostFunctionsBadRequestBody) *PostFunctionsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post functions bad request response
func (o *PostFunctionsBadRequest) SetPayload(payload *PostFunctionsBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostFunctionsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PutNetIfacesNamespaceOKCode is the HTTP code returned for type PutNetIfacesNamespaceOK
const PutNetIfacesNamespaceOKCode int = 200

/*
PutNetIfacesNamespaceOK OK

swagger:response putNetIfacesNamespaceOK
*/
type PutNetIfacesNamespaceOK struct {
}

// NewPutNetIfacesNamespaceOK creates PutNetIfacesNamespaceOK with default headers values
func NewPutNetIfacesNamespaceOK() *PutNetIfacesNamespaceOK {

	return &PutNetIfacesNamespaceOK{}
}

// WriteResponse to the client
func (o *PutNetIfacesNamespaceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PutNetIfacesNamespaceBadRequestCode is the HTTP code returned for type PutNetIfacesNamespaceBadRequest
const PutNetIfacesNamespaceBadRequestCode int = 400

/*
PutNetIfacesNamespaceBadRequest Invalid request

swagger:response putNetIfacesNamespaceBadRequest
*/
type PutNetIfacesNamespaceBadRequest struct {

	/*
	  In: Body
	*/
	Payload *PutNetIfacesNamespaceBadRequestBody `json:"body,omitempty"`
}

// NewPutNetIfacesNamespaceBadRequest creates PutNetIfacesNamespaceBadRequest with default headers values
func NewPutNetIfacesNamespaceBadRequest() *PutNetIfacesNamespaceBadRequest {

	return &PutNetIfacesNamespaceBadRequest{}
}

// WithPayload adds the payload to the put net ifaces namespace bad request response
func (o *PutNetIfacesNamespaceBadRequest) WithPayload(payload *PutNetIfacesNamespaceBadRequestBody) *PutNetIfacesNamespaceBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put net ifaces namespace bad request response
func (o *PutNetIfacesNamespaceBadRequest) SetPayload(payload *PutNetIfacesNamespaceBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutNetIfacesNamespaceBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

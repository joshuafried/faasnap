// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// DeleteVmsVMIDOKCode is the HTTP code returned for type DeleteVmsVMIDOK
const DeleteVmsVMIDOKCode int = 200

/*
DeleteVmsVMIDOK OK

swagger:response deleteVmsVmIdOK
*/
type DeleteVmsVMIDOK struct {
}

// NewDeleteVmsVMIDOK creates DeleteVmsVMIDOK with default headers values
func NewDeleteVmsVMIDOK() *DeleteVmsVMIDOK {

	return &DeleteVmsVMIDOK{}
}

// WriteResponse to the client
func (o *DeleteVmsVMIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteVmsVMIDBadRequestCode is the HTTP code returned for type DeleteVmsVMIDBadRequest
const DeleteVmsVMIDBadRequestCode int = 400

/*
DeleteVmsVMIDBadRequest Invalid request

swagger:response deleteVmsVmIdBadRequest
*/
type DeleteVmsVMIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *DeleteVmsVMIDBadRequestBody `json:"body,omitempty"`
}

// NewDeleteVmsVMIDBadRequest creates DeleteVmsVMIDBadRequest with default headers values
func NewDeleteVmsVMIDBadRequest() *DeleteVmsVMIDBadRequest {

	return &DeleteVmsVMIDBadRequest{}
}

// WithPayload adds the payload to the delete vms Vm Id bad request response
func (o *DeleteVmsVMIDBadRequest) WithPayload(payload *DeleteVmsVMIDBadRequestBody) *DeleteVmsVMIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete vms Vm Id bad request response
func (o *DeleteVmsVMIDBadRequest) SetPayload(payload *DeleteVmsVMIDBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteVmsVMIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeleteVmsVMIDHandlerFunc turns a function with the right signature into a delete vms VM ID handler
type DeleteVmsVMIDHandlerFunc func(DeleteVmsVMIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteVmsVMIDHandlerFunc) Handle(params DeleteVmsVMIDParams) middleware.Responder {
	return fn(params)
}

// DeleteVmsVMIDHandler interface for that can handle valid delete vms VM ID params
type DeleteVmsVMIDHandler interface {
	Handle(DeleteVmsVMIDParams) middleware.Responder
}

// NewDeleteVmsVMID creates a new http.Handler for the delete vms VM ID operation
func NewDeleteVmsVMID(ctx *middleware.Context, handler DeleteVmsVMIDHandler) *DeleteVmsVMID {
	return &DeleteVmsVMID{Context: ctx, Handler: handler}
}

/*
	DeleteVmsVMID swagger:route DELETE /vms/{vmId} deleteVmsVmId

Stop a VM
*/
type DeleteVmsVMID struct {
	Context *middleware.Context
	Handler DeleteVmsVMIDHandler
}

func (o *DeleteVmsVMID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteVmsVMIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeleteVmsVMIDBadRequestBody delete vms VM ID bad request body
//
// swagger:model DeleteVmsVMIDBadRequestBody
type DeleteVmsVMIDBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delete vms VM ID bad request body
func (o *DeleteVmsVMIDBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete vms VM ID bad request body based on context it is used
func (o *DeleteVmsVMIDBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteVmsVMIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteVmsVMIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteVmsVMIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

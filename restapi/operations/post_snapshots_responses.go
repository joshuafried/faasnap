// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ucsdsysnet/faasnap/models"
)

// PostSnapshotsOKCode is the HTTP code returned for type PostSnapshotsOK
const PostSnapshotsOKCode int = 200

/*
PostSnapshotsOK Success

swagger:response postSnapshotsOK
*/
type PostSnapshotsOK struct {

	/*
	  In: Body
	*/
	Payload *models.Snapshot `json:"body,omitempty"`
}

// NewPostSnapshotsOK creates PostSnapshotsOK with default headers values
func NewPostSnapshotsOK() *PostSnapshotsOK {

	return &PostSnapshotsOK{}
}

// WithPayload adds the payload to the post snapshots o k response
func (o *PostSnapshotsOK) WithPayload(payload *models.Snapshot) *PostSnapshotsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post snapshots o k response
func (o *PostSnapshotsOK) SetPayload(payload *models.Snapshot) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSnapshotsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostSnapshotsBadRequestCode is the HTTP code returned for type PostSnapshotsBadRequest
const PostSnapshotsBadRequestCode int = 400

/*
PostSnapshotsBadRequest Invalid request

swagger:response postSnapshotsBadRequest
*/
type PostSnapshotsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *PostSnapshotsBadRequestBody `json:"body,omitempty"`
}

// NewPostSnapshotsBadRequest creates PostSnapshotsBadRequest with default headers values
func NewPostSnapshotsBadRequest() *PostSnapshotsBadRequest {

	return &PostSnapshotsBadRequest{}
}

// WithPayload adds the payload to the post snapshots bad request response
func (o *PostSnapshotsBadRequest) WithPayload(payload *PostSnapshotsBadRequestBody) *PostSnapshotsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post snapshots bad request response
func (o *PostSnapshotsBadRequest) SetPayload(payload *PostSnapshotsBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSnapshotsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

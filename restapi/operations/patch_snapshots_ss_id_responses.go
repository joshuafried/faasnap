// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PatchSnapshotsSsIDOKCode is the HTTP code returned for type PatchSnapshotsSsIDOK
const PatchSnapshotsSsIDOKCode int = 200

/*
PatchSnapshotsSsIDOK OK

swagger:response patchSnapshotsSsIdOK
*/
type PatchSnapshotsSsIDOK struct {
}

// NewPatchSnapshotsSsIDOK creates PatchSnapshotsSsIDOK with default headers values
func NewPatchSnapshotsSsIDOK() *PatchSnapshotsSsIDOK {

	return &PatchSnapshotsSsIDOK{}
}

// WriteResponse to the client
func (o *PatchSnapshotsSsIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PatchSnapshotsSsIDBadRequestCode is the HTTP code returned for type PatchSnapshotsSsIDBadRequest
const PatchSnapshotsSsIDBadRequestCode int = 400

/*
PatchSnapshotsSsIDBadRequest Invalid request

swagger:response patchSnapshotsSsIdBadRequest
*/
type PatchSnapshotsSsIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *PatchSnapshotsSsIDBadRequestBody `json:"body,omitempty"`
}

// NewPatchSnapshotsSsIDBadRequest creates PatchSnapshotsSsIDBadRequest with default headers values
func NewPatchSnapshotsSsIDBadRequest() *PatchSnapshotsSsIDBadRequest {

	return &PatchSnapshotsSsIDBadRequest{}
}

// WithPayload adds the payload to the patch snapshots ss Id bad request response
func (o *PatchSnapshotsSsIDBadRequest) WithPayload(payload *PatchSnapshotsSsIDBadRequestBody) *PatchSnapshotsSsIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch snapshots ss Id bad request response
func (o *PatchSnapshotsSsIDBadRequest) SetPayload(payload *PatchSnapshotsSsIDBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchSnapshotsSsIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

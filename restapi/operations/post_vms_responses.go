// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ucsdsysnet/faasnap/models"
)

// PostVmsOKCode is the HTTP code returned for type PostVmsOK
const PostVmsOKCode int = 200

/*
PostVmsOK OK

swagger:response postVmsOK
*/
type PostVmsOK struct {

	/*
	  In: Body
	*/
	Payload *models.VM `json:"body,omitempty"`
}

// NewPostVmsOK creates PostVmsOK with default headers values
func NewPostVmsOK() *PostVmsOK {

	return &PostVmsOK{}
}

// WithPayload adds the payload to the post vms o k response
func (o *PostVmsOK) WithPayload(payload *models.VM) *PostVmsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post vms o k response
func (o *PostVmsOK) SetPayload(payload *models.VM) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVmsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostVmsBadRequestCode is the HTTP code returned for type PostVmsBadRequest
const PostVmsBadRequestCode int = 400

/*
PostVmsBadRequest Invalid request

swagger:response postVmsBadRequest
*/
type PostVmsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *PostVmsBadRequestBody `json:"body,omitempty"`
}

// NewPostVmsBadRequest creates PostVmsBadRequest with default headers values
func NewPostVmsBadRequest() *PostVmsBadRequest {

	return &PostVmsBadRequest{}
}

// WithPayload adds the payload to the post vms bad request response
func (o *PostVmsBadRequest) WithPayload(payload *PostVmsBadRequestBody) *PostVmsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post vms bad request response
func (o *PostVmsBadRequest) SetPayload(payload *PostVmsBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVmsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

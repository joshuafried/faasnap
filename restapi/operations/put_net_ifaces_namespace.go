// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PutNetIfacesNamespaceHandlerFunc turns a function with the right signature into a put net ifaces namespace handler
type PutNetIfacesNamespaceHandlerFunc func(PutNetIfacesNamespaceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutNetIfacesNamespaceHandlerFunc) Handle(params PutNetIfacesNamespaceParams) middleware.Responder {
	return fn(params)
}

// PutNetIfacesNamespaceHandler interface for that can handle valid put net ifaces namespace params
type PutNetIfacesNamespaceHandler interface {
	Handle(PutNetIfacesNamespaceParams) middleware.Responder
}

// NewPutNetIfacesNamespace creates a new http.Handler for the put net ifaces namespace operation
func NewPutNetIfacesNamespace(ctx *middleware.Context, handler PutNetIfacesNamespaceHandler) *PutNetIfacesNamespace {
	return &PutNetIfacesNamespace{Context: ctx, Handler: handler}
}

/*
	PutNetIfacesNamespace swagger:route PUT /net-ifaces/{namespace} putNetIfacesNamespace

Put a vm network
*/
type PutNetIfacesNamespace struct {
	Context *middleware.Context
	Handler PutNetIfacesNamespaceHandler
}

func (o *PutNetIfacesNamespace) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutNetIfacesNamespaceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutNetIfacesNamespaceBadRequestBody put net ifaces namespace bad request body
//
// swagger:model PutNetIfacesNamespaceBadRequestBody
type PutNetIfacesNamespaceBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this put net ifaces namespace bad request body
func (o *PutNetIfacesNamespaceBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put net ifaces namespace bad request body based on context it is used
func (o *PutNetIfacesNamespaceBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutNetIfacesNamespaceBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutNetIfacesNamespaceBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutNetIfacesNamespaceBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutNetIfacesNamespaceBody put net ifaces namespace body
//
// swagger:model PutNetIfacesNamespaceBody
type PutNetIfacesNamespaceBody struct {

	// guest addr
	GuestAddr string `json:"guest_addr,omitempty"`

	// guest mac
	GuestMac string `json:"guest_mac,omitempty"`

	// host dev name
	HostDevName string `json:"host_dev_name,omitempty"`

	// iface id
	IfaceID string `json:"iface_id,omitempty"`

	// unique addr
	UniqueAddr string `json:"unique_addr,omitempty"`
}

// Validate validates this put net ifaces namespace body
func (o *PutNetIfacesNamespaceBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put net ifaces namespace body based on context it is used
func (o *PutNetIfacesNamespaceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutNetIfacesNamespaceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutNetIfacesNamespaceBody) UnmarshalBinary(b []byte) error {
	var res PutNetIfacesNamespaceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

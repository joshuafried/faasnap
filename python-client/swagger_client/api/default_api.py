# coding: utf-8

"""
    faasnap

    FaaSnap API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def functions_get(self, **kwargs):  # noqa: E501
        """functions_get  # noqa: E501

        Return a list of functions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.functions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Function]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.functions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.functions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def functions_get_with_http_info(self, **kwargs):  # noqa: E501
        """functions_get  # noqa: E501

        Return a list of functions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.functions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Function]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method functions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/functions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Function]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def functions_post(self, **kwargs):  # noqa: E501
        """functions_post  # noqa: E501

        Create a new function  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.functions_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Function function:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.functions_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.functions_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def functions_post_with_http_info(self, **kwargs):  # noqa: E501
        """functions_post  # noqa: E501

        Create a new function  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.functions_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Function function:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['function']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method functions_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'function' in params:
            body_params = params['function']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/functions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invocations_post(self, **kwargs):  # noqa: E501
        """invocations_post  # noqa: E501

        Post an invocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invocations_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Invocation invocation:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invocations_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.invocations_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def invocations_post_with_http_info(self, **kwargs):  # noqa: E501
        """invocations_post  # noqa: E501

        Post an invocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invocations_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Invocation invocation:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invocation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invocations_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'invocation' in params:
            body_params = params['invocation']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invocations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def metrics_get(self, **kwargs):  # noqa: E501
        """metrics_get  # noqa: E501

        Metrics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.metrics_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.metrics_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def metrics_get_with_http_info(self, **kwargs):  # noqa: E501
        """metrics_get  # noqa: E501

        Metrics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metrics_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def net_ifaces_namespace_put(self, namespace, **kwargs):  # noqa: E501
        """net_ifaces_namespace_put  # noqa: E501

        Put a vm network  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.net_ifaces_namespace_put(namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: (required)
        :param Interface interface:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.net_ifaces_namespace_put_with_http_info(namespace, **kwargs)  # noqa: E501
        else:
            (data) = self.net_ifaces_namespace_put_with_http_info(namespace, **kwargs)  # noqa: E501
            return data

    def net_ifaces_namespace_put_with_http_info(self, namespace, **kwargs):  # noqa: E501
        """net_ifaces_namespace_put  # noqa: E501

        Put a vm network  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.net_ifaces_namespace_put_with_http_info(namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: (required)
        :param Interface interface:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['namespace', 'interface']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method net_ifaces_namespace_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'namespace' is set
        if self.api_client.client_side_validation and ('namespace' not in params or
                                                       params['namespace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `namespace` when calling `net_ifaces_namespace_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'interface' in params:
            body_params = params['interface']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/net-ifaces/{namespace}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snapshots_post(self, **kwargs):  # noqa: E501
        """snapshots_post  # noqa: E501

        Take a snapshot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Snapshot snapshot:
        :return: Snapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snapshots_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.snapshots_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def snapshots_post_with_http_info(self, **kwargs):  # noqa: E501
        """snapshots_post  # noqa: E501

        Take a snapshot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Snapshot snapshot:
        :return: Snapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snapshots_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'snapshot' in params:
            body_params = params['snapshot']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/snapshots', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Snapshot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snapshots_put(self, from_snapshot, mem_file_path, **kwargs):  # noqa: E501
        """snapshots_put  # noqa: E501

        Put snapshot (copy)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_put(from_snapshot, mem_file_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_snapshot: (required)
        :param str mem_file_path: (required)
        :return: Snapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snapshots_put_with_http_info(from_snapshot, mem_file_path, **kwargs)  # noqa: E501
        else:
            (data) = self.snapshots_put_with_http_info(from_snapshot, mem_file_path, **kwargs)  # noqa: E501
            return data

    def snapshots_put_with_http_info(self, from_snapshot, mem_file_path, **kwargs):  # noqa: E501
        """snapshots_put  # noqa: E501

        Put snapshot (copy)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_put_with_http_info(from_snapshot, mem_file_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_snapshot: (required)
        :param str mem_file_path: (required)
        :return: Snapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_snapshot', 'mem_file_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snapshots_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_snapshot' is set
        if self.api_client.client_side_validation and ('from_snapshot' not in params or
                                                       params['from_snapshot'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `from_snapshot` when calling `snapshots_put`")  # noqa: E501
        # verify the required parameter 'mem_file_path' is set
        if self.api_client.client_side_validation and ('mem_file_path' not in params or
                                                       params['mem_file_path'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mem_file_path` when calling `snapshots_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_snapshot' in params:
            query_params.append(('from_snapshot', params['from_snapshot']))  # noqa: E501
        if 'mem_file_path' in params:
            query_params.append(('mem_file_path', params['mem_file_path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/snapshots', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Snapshot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snapshots_ss_id_mincore_get(self, ss_id, **kwargs):  # noqa: E501
        """snapshots_ss_id_mincore_get  # noqa: E501

        Get mincore state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_ss_id_mincore_get(ss_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ss_id: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snapshots_ss_id_mincore_get_with_http_info(ss_id, **kwargs)  # noqa: E501
        else:
            (data) = self.snapshots_ss_id_mincore_get_with_http_info(ss_id, **kwargs)  # noqa: E501
            return data

    def snapshots_ss_id_mincore_get_with_http_info(self, ss_id, **kwargs):  # noqa: E501
        """snapshots_ss_id_mincore_get  # noqa: E501

        Get mincore state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_ss_id_mincore_get_with_http_info(ss_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ss_id: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ss_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snapshots_ss_id_mincore_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ss_id' is set
        if self.api_client.client_side_validation and ('ss_id' not in params or
                                                       params['ss_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ss_id` when calling `snapshots_ss_id_mincore_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ss_id' in params:
            path_params['ssId'] = params['ss_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/snapshots/{ssId}/mincore', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snapshots_ss_id_mincore_patch(self, ss_id, state, **kwargs):  # noqa: E501
        """snapshots_ss_id_mincore_patch  # noqa: E501

        Change mincore state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_ss_id_mincore_patch(ss_id, state, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ss_id: (required)
        :param State1 state: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snapshots_ss_id_mincore_patch_with_http_info(ss_id, state, **kwargs)  # noqa: E501
        else:
            (data) = self.snapshots_ss_id_mincore_patch_with_http_info(ss_id, state, **kwargs)  # noqa: E501
            return data

    def snapshots_ss_id_mincore_patch_with_http_info(self, ss_id, state, **kwargs):  # noqa: E501
        """snapshots_ss_id_mincore_patch  # noqa: E501

        Change mincore state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_ss_id_mincore_patch_with_http_info(ss_id, state, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ss_id: (required)
        :param State1 state: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ss_id', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snapshots_ss_id_mincore_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ss_id' is set
        if self.api_client.client_side_validation and ('ss_id' not in params or
                                                       params['ss_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ss_id` when calling `snapshots_ss_id_mincore_patch`")  # noqa: E501
        # verify the required parameter 'state' is set
        if self.api_client.client_side_validation and ('state' not in params or
                                                       params['state'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `state` when calling `snapshots_ss_id_mincore_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ss_id' in params:
            path_params['ssId'] = params['ss_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'state' in params:
            body_params = params['state']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/snapshots/{ssId}/mincore', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snapshots_ss_id_mincore_post(self, ss_id, layer, **kwargs):  # noqa: E501
        """snapshots_ss_id_mincore_post  # noqa: E501

        Add mincore layer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_ss_id_mincore_post(ss_id, layer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ss_id: (required)
        :param Layer layer: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snapshots_ss_id_mincore_post_with_http_info(ss_id, layer, **kwargs)  # noqa: E501
        else:
            (data) = self.snapshots_ss_id_mincore_post_with_http_info(ss_id, layer, **kwargs)  # noqa: E501
            return data

    def snapshots_ss_id_mincore_post_with_http_info(self, ss_id, layer, **kwargs):  # noqa: E501
        """snapshots_ss_id_mincore_post  # noqa: E501

        Add mincore layer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_ss_id_mincore_post_with_http_info(ss_id, layer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ss_id: (required)
        :param Layer layer: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ss_id', 'layer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snapshots_ss_id_mincore_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ss_id' is set
        if self.api_client.client_side_validation and ('ss_id' not in params or
                                                       params['ss_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ss_id` when calling `snapshots_ss_id_mincore_post`")  # noqa: E501
        # verify the required parameter 'layer' is set
        if self.api_client.client_side_validation and ('layer' not in params or
                                                       params['layer'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer` when calling `snapshots_ss_id_mincore_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ss_id' in params:
            path_params['ssId'] = params['ss_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'layer' in params:
            body_params = params['layer']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/snapshots/{ssId}/mincore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snapshots_ss_id_mincore_put(self, ss_id, **kwargs):  # noqa: E501
        """snapshots_ss_id_mincore_put  # noqa: E501

        Put mincore state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_ss_id_mincore_put(ss_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ss_id: (required)
        :param str source:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snapshots_ss_id_mincore_put_with_http_info(ss_id, **kwargs)  # noqa: E501
        else:
            (data) = self.snapshots_ss_id_mincore_put_with_http_info(ss_id, **kwargs)  # noqa: E501
            return data

    def snapshots_ss_id_mincore_put_with_http_info(self, ss_id, **kwargs):  # noqa: E501
        """snapshots_ss_id_mincore_put  # noqa: E501

        Put mincore state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_ss_id_mincore_put_with_http_info(ss_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ss_id: (required)
        :param str source:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ss_id', 'source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snapshots_ss_id_mincore_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ss_id' is set
        if self.api_client.client_side_validation and ('ss_id' not in params or
                                                       params['ss_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ss_id` when calling `snapshots_ss_id_mincore_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ss_id' in params:
            path_params['ssId'] = params['ss_id']  # noqa: E501

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/snapshots/{ssId}/mincore', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snapshots_ss_id_patch(self, ss_id, **kwargs):  # noqa: E501
        """snapshots_ss_id_patch  # noqa: E501

        Change snapshot state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_ss_id_patch(ss_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ss_id: (required)
        :param State state:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snapshots_ss_id_patch_with_http_info(ss_id, **kwargs)  # noqa: E501
        else:
            (data) = self.snapshots_ss_id_patch_with_http_info(ss_id, **kwargs)  # noqa: E501
            return data

    def snapshots_ss_id_patch_with_http_info(self, ss_id, **kwargs):  # noqa: E501
        """snapshots_ss_id_patch  # noqa: E501

        Change snapshot state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_ss_id_patch_with_http_info(ss_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ss_id: (required)
        :param State state:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ss_id', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snapshots_ss_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ss_id' is set
        if self.api_client.client_side_validation and ('ss_id' not in params or
                                                       params['ss_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ss_id` when calling `snapshots_ss_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ss_id' in params:
            path_params['ssId'] = params['ss_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'state' in params:
            body_params = params['state']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/snapshots/{ssId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snapshots_ss_id_reap_delete(self, ss_id, **kwargs):  # noqa: E501
        """snapshots_ss_id_reap_delete  # noqa: E501

        delete reap state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_ss_id_reap_delete(ss_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ss_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snapshots_ss_id_reap_delete_with_http_info(ss_id, **kwargs)  # noqa: E501
        else:
            (data) = self.snapshots_ss_id_reap_delete_with_http_info(ss_id, **kwargs)  # noqa: E501
            return data

    def snapshots_ss_id_reap_delete_with_http_info(self, ss_id, **kwargs):  # noqa: E501
        """snapshots_ss_id_reap_delete  # noqa: E501

        delete reap state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_ss_id_reap_delete_with_http_info(ss_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ss_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ss_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snapshots_ss_id_reap_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ss_id' is set
        if self.api_client.client_side_validation and ('ss_id' not in params or
                                                       params['ss_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ss_id` when calling `snapshots_ss_id_reap_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ss_id' in params:
            path_params['ssId'] = params['ss_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/snapshots/{ssId}/reap', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snapshots_ss_id_reap_get(self, ss_id, **kwargs):  # noqa: E501
        """snapshots_ss_id_reap_get  # noqa: E501

        get reap state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_ss_id_reap_get(ss_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ss_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snapshots_ss_id_reap_get_with_http_info(ss_id, **kwargs)  # noqa: E501
        else:
            (data) = self.snapshots_ss_id_reap_get_with_http_info(ss_id, **kwargs)  # noqa: E501
            return data

    def snapshots_ss_id_reap_get_with_http_info(self, ss_id, **kwargs):  # noqa: E501
        """snapshots_ss_id_reap_get  # noqa: E501

        get reap state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_ss_id_reap_get_with_http_info(ss_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ss_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ss_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snapshots_ss_id_reap_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ss_id' is set
        if self.api_client.client_side_validation and ('ss_id' not in params or
                                                       params['ss_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ss_id` when calling `snapshots_ss_id_reap_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ss_id' in params:
            path_params['ssId'] = params['ss_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/snapshots/{ssId}/reap', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snapshots_ss_id_reap_patch(self, ss_id, **kwargs):  # noqa: E501
        """snapshots_ss_id_reap_patch  # noqa: E501

        Change reap state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_ss_id_reap_patch(ss_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ss_id: (required)
        :param bool cache:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snapshots_ss_id_reap_patch_with_http_info(ss_id, **kwargs)  # noqa: E501
        else:
            (data) = self.snapshots_ss_id_reap_patch_with_http_info(ss_id, **kwargs)  # noqa: E501
            return data

    def snapshots_ss_id_reap_patch_with_http_info(self, ss_id, **kwargs):  # noqa: E501
        """snapshots_ss_id_reap_patch  # noqa: E501

        Change reap state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshots_ss_id_reap_patch_with_http_info(ss_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ss_id: (required)
        :param bool cache:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ss_id', 'cache']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snapshots_ss_id_reap_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ss_id' is set
        if self.api_client.client_side_validation and ('ss_id' not in params or
                                                       params['ss_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ss_id` when calling `snapshots_ss_id_reap_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ss_id' in params:
            path_params['ssId'] = params['ss_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cache' in params:
            body_params = params['cache']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/snapshots/{ssId}/reap', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ui_data_get(self, **kwargs):  # noqa: E501
        """ui_data_get  # noqa: E501

        UI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ui_data_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ui_data_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ui_data_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def ui_data_get_with_http_info(self, **kwargs):  # noqa: E501
        """ui_data_get  # noqa: E501

        UI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ui_data_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ui_data_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ui/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ui_get(self, **kwargs):  # noqa: E501
        """ui_get  # noqa: E501

        UI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ui_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ui_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ui_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def ui_get_with_http_info(self, **kwargs):  # noqa: E501
        """ui_get  # noqa: E501

        UI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ui_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ui_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ui', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmms_post(self, **kwargs):  # noqa: E501
        """vmms_post  # noqa: E501

        Create a VMM in the pool  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmms_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VMM vmm:
        :return: VM
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vmms_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.vmms_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def vmms_post_with_http_info(self, **kwargs):  # noqa: E501
        """vmms_post  # noqa: E501

        Create a VMM in the pool  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmms_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VMM vmm:
        :return: VM
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vmm']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmms_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vmm' in params:
            body_params = params['vmm']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vmms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VM',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vms_get(self, **kwargs):  # noqa: E501
        """vms_get  # noqa: E501

        Returns a list of active VMs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vms_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[VM]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vms_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.vms_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def vms_get_with_http_info(self, **kwargs):  # noqa: E501
        """vms_get  # noqa: E501

        Returns a list of active VMs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vms_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[VM]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vms_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VM]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vms_post(self, **kwargs):  # noqa: E501
        """vms_post  # noqa: E501

        Create a new VM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vms_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VM1 vm:
        :return: VM
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vms_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.vms_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def vms_post_with_http_info(self, **kwargs):  # noqa: E501
        """vms_post  # noqa: E501

        Create a new VM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vms_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VM1 vm:
        :return: VM
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vm']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vms_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vm' in params:
            body_params = params['vm']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VM',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vms_vm_id_delete(self, vm_id, **kwargs):  # noqa: E501
        """vms_vm_id_delete  # noqa: E501

        Stop a VM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vms_vm_id_delete(vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vm_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vms_vm_id_delete_with_http_info(vm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.vms_vm_id_delete_with_http_info(vm_id, **kwargs)  # noqa: E501
            return data

    def vms_vm_id_delete_with_http_info(self, vm_id, **kwargs):  # noqa: E501
        """vms_vm_id_delete  # noqa: E501

        Stop a VM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vms_vm_id_delete_with_http_info(vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vm_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vms_vm_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vm_id' is set
        if self.api_client.client_side_validation and ('vm_id' not in params or
                                                       params['vm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vm_id` when calling `vms_vm_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in params:
            path_params['vmId'] = params['vm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vms/{vmId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vms_vm_id_get(self, vm_id, **kwargs):  # noqa: E501
        """vms_vm_id_get  # noqa: E501

        Describe a VM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vms_vm_id_get(vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vm_id: (required)
        :return: VM
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vms_vm_id_get_with_http_info(vm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.vms_vm_id_get_with_http_info(vm_id, **kwargs)  # noqa: E501
            return data

    def vms_vm_id_get_with_http_info(self, vm_id, **kwargs):  # noqa: E501
        """vms_vm_id_get  # noqa: E501

        Describe a VM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vms_vm_id_get_with_http_info(vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vm_id: (required)
        :return: VM
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vms_vm_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vm_id' is set
        if self.api_client.client_side_validation and ('vm_id' not in params or
                                                       params['vm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vm_id` when calling `vms_vm_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in params:
            path_params['vmId'] = params['vm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vms/{vmId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VM',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

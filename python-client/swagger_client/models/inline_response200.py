# coding: utf-8

"""
    faasnap

    FaaSnap API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nlayers': 'int',
        'n_nz_regions': 'int',
        'nz_region_size': 'int',
        'n_ws_regions': 'int',
        'ws_region_size': 'int'
    }

    attribute_map = {
        'nlayers': 'nlayers',
        'n_nz_regions': 'n_nz_regions',
        'nz_region_size': 'nz_region_size',
        'n_ws_regions': 'n_ws_regions',
        'ws_region_size': 'ws_region_size'
    }

    def __init__(self, nlayers=None, n_nz_regions=None, nz_region_size=None, n_ws_regions=None, ws_region_size=None, _configuration=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._nlayers = None
        self._n_nz_regions = None
        self._nz_region_size = None
        self._n_ws_regions = None
        self._ws_region_size = None
        self.discriminator = None

        if nlayers is not None:
            self.nlayers = nlayers
        if n_nz_regions is not None:
            self.n_nz_regions = n_nz_regions
        if nz_region_size is not None:
            self.nz_region_size = nz_region_size
        if n_ws_regions is not None:
            self.n_ws_regions = n_ws_regions
        if ws_region_size is not None:
            self.ws_region_size = ws_region_size

    @property
    def nlayers(self):
        """Gets the nlayers of this InlineResponse200.  # noqa: E501


        :return: The nlayers of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._nlayers

    @nlayers.setter
    def nlayers(self, nlayers):
        """Sets the nlayers of this InlineResponse200.


        :param nlayers: The nlayers of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._nlayers = nlayers

    @property
    def n_nz_regions(self):
        """Gets the n_nz_regions of this InlineResponse200.  # noqa: E501


        :return: The n_nz_regions of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._n_nz_regions

    @n_nz_regions.setter
    def n_nz_regions(self, n_nz_regions):
        """Sets the n_nz_regions of this InlineResponse200.


        :param n_nz_regions: The n_nz_regions of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._n_nz_regions = n_nz_regions

    @property
    def nz_region_size(self):
        """Gets the nz_region_size of this InlineResponse200.  # noqa: E501


        :return: The nz_region_size of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._nz_region_size

    @nz_region_size.setter
    def nz_region_size(self, nz_region_size):
        """Sets the nz_region_size of this InlineResponse200.


        :param nz_region_size: The nz_region_size of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._nz_region_size = nz_region_size

    @property
    def n_ws_regions(self):
        """Gets the n_ws_regions of this InlineResponse200.  # noqa: E501


        :return: The n_ws_regions of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._n_ws_regions

    @n_ws_regions.setter
    def n_ws_regions(self, n_ws_regions):
        """Sets the n_ws_regions of this InlineResponse200.


        :param n_ws_regions: The n_ws_regions of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._n_ws_regions = n_ws_regions

    @property
    def ws_region_size(self):
        """Gets the ws_region_size of this InlineResponse200.  # noqa: E501


        :return: The ws_region_size of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._ws_region_size

    @ws_region_size.setter
    def ws_region_size(self, ws_region_size):
        """Sets the ws_region_size of this InlineResponse200.


        :param ws_region_size: The ws_region_size of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._ws_region_size = ws_region_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200):
            return True

        return self.to_dict() != other.to_dict()

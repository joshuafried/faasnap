# coding: utf-8

"""
    faasnap

    FaaSnap API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class VM1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'func_name': 'str',
        'ss_id': 'str',
        'namespace': 'str'
    }

    attribute_map = {
        'func_name': 'func_name',
        'ss_id': 'ssId',
        'namespace': 'namespace'
    }

    def __init__(self, func_name=None, ss_id=None, namespace=None, _configuration=None):  # noqa: E501
        """VM1 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._func_name = None
        self._ss_id = None
        self._namespace = None
        self.discriminator = None

        if func_name is not None:
            self.func_name = func_name
        if ss_id is not None:
            self.ss_id = ss_id
        if namespace is not None:
            self.namespace = namespace

    @property
    def func_name(self):
        """Gets the func_name of this VM1.  # noqa: E501


        :return: The func_name of this VM1.  # noqa: E501
        :rtype: str
        """
        return self._func_name

    @func_name.setter
    def func_name(self, func_name):
        """Sets the func_name of this VM1.


        :param func_name: The func_name of this VM1.  # noqa: E501
        :type: str
        """

        self._func_name = func_name

    @property
    def ss_id(self):
        """Gets the ss_id of this VM1.  # noqa: E501


        :return: The ss_id of this VM1.  # noqa: E501
        :rtype: str
        """
        return self._ss_id

    @ss_id.setter
    def ss_id(self, ss_id):
        """Sets the ss_id of this VM1.


        :param ss_id: The ss_id of this VM1.  # noqa: E501
        :type: str
        """

        self._ss_id = ss_id

    @property
    def namespace(self):
        """Gets the namespace of this VM1.  # noqa: E501


        :return: The namespace of this VM1.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this VM1.


        :param namespace: The namespace of this VM1.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VM1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VM1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VM1):
            return True

        return self.to_dict() != other.to_dict()

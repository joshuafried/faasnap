# coding: utf-8

"""
    faasnap

    FaaSnap API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Snapshot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vm_id': 'str',
        'ss_id': 'str',
        'snapshot_type': 'str',
        'snapshot_path': 'str',
        'mem_file_path': 'str',
        'version': 'str',
        'record_regions': 'bool',
        'size_threshold': 'int',
        'interval_threshold': 'int'
    }

    attribute_map = {
        'vm_id': 'vmId',
        'ss_id': 'ssId',
        'snapshot_type': 'snapshot_type',
        'snapshot_path': 'snapshot_path',
        'mem_file_path': 'mem_file_path',
        'version': 'version',
        'record_regions': 'record_regions',
        'size_threshold': 'size_threshold',
        'interval_threshold': 'interval_threshold'
    }

    def __init__(self, vm_id=None, ss_id=None, snapshot_type=None, snapshot_path=None, mem_file_path=None, version=None, record_regions=None, size_threshold=None, interval_threshold=None, _configuration=None):  # noqa: E501
        """Snapshot - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._vm_id = None
        self._ss_id = None
        self._snapshot_type = None
        self._snapshot_path = None
        self._mem_file_path = None
        self._version = None
        self._record_regions = None
        self._size_threshold = None
        self._interval_threshold = None
        self.discriminator = None

        self.vm_id = vm_id
        if ss_id is not None:
            self.ss_id = ss_id
        if snapshot_type is not None:
            self.snapshot_type = snapshot_type
        if snapshot_path is not None:
            self.snapshot_path = snapshot_path
        if mem_file_path is not None:
            self.mem_file_path = mem_file_path
        if version is not None:
            self.version = version
        if record_regions is not None:
            self.record_regions = record_regions
        if size_threshold is not None:
            self.size_threshold = size_threshold
        if interval_threshold is not None:
            self.interval_threshold = interval_threshold

    @property
    def vm_id(self):
        """Gets the vm_id of this Snapshot.  # noqa: E501


        :return: The vm_id of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._vm_id

    @vm_id.setter
    def vm_id(self, vm_id):
        """Sets the vm_id of this Snapshot.


        :param vm_id: The vm_id of this Snapshot.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and vm_id is None:
            raise ValueError("Invalid value for `vm_id`, must not be `None`")  # noqa: E501

        self._vm_id = vm_id

    @property
    def ss_id(self):
        """Gets the ss_id of this Snapshot.  # noqa: E501


        :return: The ss_id of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._ss_id

    @ss_id.setter
    def ss_id(self, ss_id):
        """Sets the ss_id of this Snapshot.


        :param ss_id: The ss_id of this Snapshot.  # noqa: E501
        :type: str
        """

        self._ss_id = ss_id

    @property
    def snapshot_type(self):
        """Gets the snapshot_type of this Snapshot.  # noqa: E501


        :return: The snapshot_type of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_type

    @snapshot_type.setter
    def snapshot_type(self, snapshot_type):
        """Sets the snapshot_type of this Snapshot.


        :param snapshot_type: The snapshot_type of this Snapshot.  # noqa: E501
        :type: str
        """

        self._snapshot_type = snapshot_type

    @property
    def snapshot_path(self):
        """Gets the snapshot_path of this Snapshot.  # noqa: E501


        :return: The snapshot_path of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_path

    @snapshot_path.setter
    def snapshot_path(self, snapshot_path):
        """Sets the snapshot_path of this Snapshot.


        :param snapshot_path: The snapshot_path of this Snapshot.  # noqa: E501
        :type: str
        """

        self._snapshot_path = snapshot_path

    @property
    def mem_file_path(self):
        """Gets the mem_file_path of this Snapshot.  # noqa: E501


        :return: The mem_file_path of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._mem_file_path

    @mem_file_path.setter
    def mem_file_path(self, mem_file_path):
        """Sets the mem_file_path of this Snapshot.


        :param mem_file_path: The mem_file_path of this Snapshot.  # noqa: E501
        :type: str
        """

        self._mem_file_path = mem_file_path

    @property
    def version(self):
        """Gets the version of this Snapshot.  # noqa: E501


        :return: The version of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Snapshot.


        :param version: The version of this Snapshot.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def record_regions(self):
        """Gets the record_regions of this Snapshot.  # noqa: E501


        :return: The record_regions of this Snapshot.  # noqa: E501
        :rtype: bool
        """
        return self._record_regions

    @record_regions.setter
    def record_regions(self, record_regions):
        """Sets the record_regions of this Snapshot.


        :param record_regions: The record_regions of this Snapshot.  # noqa: E501
        :type: bool
        """

        self._record_regions = record_regions

    @property
    def size_threshold(self):
        """Gets the size_threshold of this Snapshot.  # noqa: E501


        :return: The size_threshold of this Snapshot.  # noqa: E501
        :rtype: int
        """
        return self._size_threshold

    @size_threshold.setter
    def size_threshold(self, size_threshold):
        """Sets the size_threshold of this Snapshot.


        :param size_threshold: The size_threshold of this Snapshot.  # noqa: E501
        :type: int
        """

        self._size_threshold = size_threshold

    @property
    def interval_threshold(self):
        """Gets the interval_threshold of this Snapshot.  # noqa: E501


        :return: The interval_threshold of this Snapshot.  # noqa: E501
        :rtype: int
        """
        return self._interval_threshold

    @interval_threshold.setter
    def interval_threshold(self, interval_threshold):
        """Sets the interval_threshold of this Snapshot.


        :param interval_threshold: The interval_threshold of this Snapshot.  # noqa: E501
        :type: int
        """

        self._interval_threshold = interval_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Snapshot, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Snapshot):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Snapshot):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    faasnap

    FaaSnap API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class State1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_records_size': 'int',
        'trim_regions': 'bool',
        'to_ws_file': 'str',
        'inactive_ws': 'bool',
        'zero_ws': 'bool',
        'size_threshold': 'int',
        'interval_threshold': 'int',
        'mincore_cache': 'list[int]',
        'drop_ws_cache': 'bool'
    }

    attribute_map = {
        'from_records_size': 'from_records_size',
        'trim_regions': 'trim_regions',
        'to_ws_file': 'to_ws_file',
        'inactive_ws': 'inactive_ws',
        'zero_ws': 'zero_ws',
        'size_threshold': 'size_threshold',
        'interval_threshold': 'interval_threshold',
        'mincore_cache': 'mincore_cache',
        'drop_ws_cache': 'drop_ws_cache'
    }

    def __init__(self, from_records_size=None, trim_regions=None, to_ws_file=None, inactive_ws=None, zero_ws=None, size_threshold=None, interval_threshold=None, mincore_cache=None, drop_ws_cache=None, _configuration=None):  # noqa: E501
        """State1 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._from_records_size = None
        self._trim_regions = None
        self._to_ws_file = None
        self._inactive_ws = None
        self._zero_ws = None
        self._size_threshold = None
        self._interval_threshold = None
        self._mincore_cache = None
        self._drop_ws_cache = None
        self.discriminator = None

        if from_records_size is not None:
            self.from_records_size = from_records_size
        if trim_regions is not None:
            self.trim_regions = trim_regions
        if to_ws_file is not None:
            self.to_ws_file = to_ws_file
        if inactive_ws is not None:
            self.inactive_ws = inactive_ws
        if zero_ws is not None:
            self.zero_ws = zero_ws
        if size_threshold is not None:
            self.size_threshold = size_threshold
        if interval_threshold is not None:
            self.interval_threshold = interval_threshold
        if mincore_cache is not None:
            self.mincore_cache = mincore_cache
        if drop_ws_cache is not None:
            self.drop_ws_cache = drop_ws_cache

    @property
    def from_records_size(self):
        """Gets the from_records_size of this State1.  # noqa: E501


        :return: The from_records_size of this State1.  # noqa: E501
        :rtype: int
        """
        return self._from_records_size

    @from_records_size.setter
    def from_records_size(self, from_records_size):
        """Sets the from_records_size of this State1.


        :param from_records_size: The from_records_size of this State1.  # noqa: E501
        :type: int
        """

        self._from_records_size = from_records_size

    @property
    def trim_regions(self):
        """Gets the trim_regions of this State1.  # noqa: E501


        :return: The trim_regions of this State1.  # noqa: E501
        :rtype: bool
        """
        return self._trim_regions

    @trim_regions.setter
    def trim_regions(self, trim_regions):
        """Sets the trim_regions of this State1.


        :param trim_regions: The trim_regions of this State1.  # noqa: E501
        :type: bool
        """

        self._trim_regions = trim_regions

    @property
    def to_ws_file(self):
        """Gets the to_ws_file of this State1.  # noqa: E501


        :return: The to_ws_file of this State1.  # noqa: E501
        :rtype: str
        """
        return self._to_ws_file

    @to_ws_file.setter
    def to_ws_file(self, to_ws_file):
        """Sets the to_ws_file of this State1.


        :param to_ws_file: The to_ws_file of this State1.  # noqa: E501
        :type: str
        """

        self._to_ws_file = to_ws_file

    @property
    def inactive_ws(self):
        """Gets the inactive_ws of this State1.  # noqa: E501


        :return: The inactive_ws of this State1.  # noqa: E501
        :rtype: bool
        """
        return self._inactive_ws

    @inactive_ws.setter
    def inactive_ws(self, inactive_ws):
        """Sets the inactive_ws of this State1.


        :param inactive_ws: The inactive_ws of this State1.  # noqa: E501
        :type: bool
        """

        self._inactive_ws = inactive_ws

    @property
    def zero_ws(self):
        """Gets the zero_ws of this State1.  # noqa: E501


        :return: The zero_ws of this State1.  # noqa: E501
        :rtype: bool
        """
        return self._zero_ws

    @zero_ws.setter
    def zero_ws(self, zero_ws):
        """Sets the zero_ws of this State1.


        :param zero_ws: The zero_ws of this State1.  # noqa: E501
        :type: bool
        """

        self._zero_ws = zero_ws

    @property
    def size_threshold(self):
        """Gets the size_threshold of this State1.  # noqa: E501


        :return: The size_threshold of this State1.  # noqa: E501
        :rtype: int
        """
        return self._size_threshold

    @size_threshold.setter
    def size_threshold(self, size_threshold):
        """Sets the size_threshold of this State1.


        :param size_threshold: The size_threshold of this State1.  # noqa: E501
        :type: int
        """

        self._size_threshold = size_threshold

    @property
    def interval_threshold(self):
        """Gets the interval_threshold of this State1.  # noqa: E501


        :return: The interval_threshold of this State1.  # noqa: E501
        :rtype: int
        """
        return self._interval_threshold

    @interval_threshold.setter
    def interval_threshold(self, interval_threshold):
        """Sets the interval_threshold of this State1.


        :param interval_threshold: The interval_threshold of this State1.  # noqa: E501
        :type: int
        """

        self._interval_threshold = interval_threshold

    @property
    def mincore_cache(self):
        """Gets the mincore_cache of this State1.  # noqa: E501


        :return: The mincore_cache of this State1.  # noqa: E501
        :rtype: list[int]
        """
        return self._mincore_cache

    @mincore_cache.setter
    def mincore_cache(self, mincore_cache):
        """Sets the mincore_cache of this State1.


        :param mincore_cache: The mincore_cache of this State1.  # noqa: E501
        :type: list[int]
        """

        self._mincore_cache = mincore_cache

    @property
    def drop_ws_cache(self):
        """Gets the drop_ws_cache of this State1.  # noqa: E501


        :return: The drop_ws_cache of this State1.  # noqa: E501
        :rtype: bool
        """
        return self._drop_ws_cache

    @drop_ws_cache.setter
    def drop_ws_cache(self, drop_ws_cache):
        """Sets the drop_ws_cache of this State1.


        :param drop_ws_cache: The drop_ws_cache of this State1.  # noqa: E501
        :type: bool
        """

        self._drop_ws_cache = drop_ws_cache

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(State1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, State1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, State1):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    faasnap

    FaaSnap API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class State(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dig_hole': 'bool',
        'load_cache': 'bool',
        'drop_cache': 'bool'
    }

    attribute_map = {
        'dig_hole': 'dig_hole',
        'load_cache': 'load_cache',
        'drop_cache': 'drop_cache'
    }

    def __init__(self, dig_hole=None, load_cache=None, drop_cache=None, _configuration=None):  # noqa: E501
        """State - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dig_hole = None
        self._load_cache = None
        self._drop_cache = None
        self.discriminator = None

        if dig_hole is not None:
            self.dig_hole = dig_hole
        if load_cache is not None:
            self.load_cache = load_cache
        if drop_cache is not None:
            self.drop_cache = drop_cache

    @property
    def dig_hole(self):
        """Gets the dig_hole of this State.  # noqa: E501


        :return: The dig_hole of this State.  # noqa: E501
        :rtype: bool
        """
        return self._dig_hole

    @dig_hole.setter
    def dig_hole(self, dig_hole):
        """Sets the dig_hole of this State.


        :param dig_hole: The dig_hole of this State.  # noqa: E501
        :type: bool
        """

        self._dig_hole = dig_hole

    @property
    def load_cache(self):
        """Gets the load_cache of this State.  # noqa: E501


        :return: The load_cache of this State.  # noqa: E501
        :rtype: bool
        """
        return self._load_cache

    @load_cache.setter
    def load_cache(self, load_cache):
        """Sets the load_cache of this State.


        :param load_cache: The load_cache of this State.  # noqa: E501
        :type: bool
        """

        self._load_cache = load_cache

    @property
    def drop_cache(self):
        """Gets the drop_cache of this State.  # noqa: E501


        :return: The drop_cache of this State.  # noqa: E501
        :rtype: bool
        """
        return self._drop_cache

    @drop_cache.setter
    def drop_cache(self, drop_cache):
        """Sets the drop_cache of this State.


        :param drop_cache: The drop_cache of this State.  # noqa: E501
        :type: bool
        """

        self._drop_cache = drop_cache

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(State, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, State):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, State):
            return True

        return self.to_dict() != other.to_dict()

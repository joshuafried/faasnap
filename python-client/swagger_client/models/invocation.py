# coding: utf-8

"""
    faasnap

    FaaSnap API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Invocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'func_name': 'str',
        'vm_id': 'str',
        'ss_id': 'str',
        'params': 'str',
        'mincore': 'int',
        'mincore_size': 'int',
        'load_mincore': 'list[int]',
        'use_mem_file': 'bool',
        'overlay_regions': 'bool',
        'use_ws_file': 'bool',
        'vmm_load_ws': 'bool',
        'enable_reap': 'bool',
        'ws_file_direct_io': 'bool',
        'ws_single_read': 'bool',
        'namespace': 'str'
    }

    attribute_map = {
        'func_name': 'func_name',
        'vm_id': 'vmId',
        'ss_id': 'ssId',
        'params': 'params',
        'mincore': 'mincore',
        'mincore_size': 'mincore_size',
        'load_mincore': 'loadMincore',
        'use_mem_file': 'use_mem_file',
        'overlay_regions': 'overlay_regions',
        'use_ws_file': 'use_ws_file',
        'vmm_load_ws': 'vmm_load_ws',
        'enable_reap': 'enableReap',
        'ws_file_direct_io': 'wsFileDirectIo',
        'ws_single_read': 'wsSingleRead',
        'namespace': 'namespace'
    }

    def __init__(self, func_name=None, vm_id=None, ss_id=None, params=None, mincore=None, mincore_size=None, load_mincore=None, use_mem_file=None, overlay_regions=None, use_ws_file=None, vmm_load_ws=None, enable_reap=None, ws_file_direct_io=None, ws_single_read=None, namespace=None, _configuration=None):  # noqa: E501
        """Invocation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._func_name = None
        self._vm_id = None
        self._ss_id = None
        self._params = None
        self._mincore = None
        self._mincore_size = None
        self._load_mincore = None
        self._use_mem_file = None
        self._overlay_regions = None
        self._use_ws_file = None
        self._vmm_load_ws = None
        self._enable_reap = None
        self._ws_file_direct_io = None
        self._ws_single_read = None
        self._namespace = None
        self.discriminator = None

        self.func_name = func_name
        if vm_id is not None:
            self.vm_id = vm_id
        if ss_id is not None:
            self.ss_id = ss_id
        if params is not None:
            self.params = params
        if mincore is not None:
            self.mincore = mincore
        if mincore_size is not None:
            self.mincore_size = mincore_size
        if load_mincore is not None:
            self.load_mincore = load_mincore
        if use_mem_file is not None:
            self.use_mem_file = use_mem_file
        if overlay_regions is not None:
            self.overlay_regions = overlay_regions
        if use_ws_file is not None:
            self.use_ws_file = use_ws_file
        if vmm_load_ws is not None:
            self.vmm_load_ws = vmm_load_ws
        if enable_reap is not None:
            self.enable_reap = enable_reap
        if ws_file_direct_io is not None:
            self.ws_file_direct_io = ws_file_direct_io
        if ws_single_read is not None:
            self.ws_single_read = ws_single_read
        if namespace is not None:
            self.namespace = namespace

    @property
    def func_name(self):
        """Gets the func_name of this Invocation.  # noqa: E501


        :return: The func_name of this Invocation.  # noqa: E501
        :rtype: str
        """
        return self._func_name

    @func_name.setter
    def func_name(self, func_name):
        """Sets the func_name of this Invocation.


        :param func_name: The func_name of this Invocation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and func_name is None:
            raise ValueError("Invalid value for `func_name`, must not be `None`")  # noqa: E501

        self._func_name = func_name

    @property
    def vm_id(self):
        """Gets the vm_id of this Invocation.  # noqa: E501


        :return: The vm_id of this Invocation.  # noqa: E501
        :rtype: str
        """
        return self._vm_id

    @vm_id.setter
    def vm_id(self, vm_id):
        """Sets the vm_id of this Invocation.


        :param vm_id: The vm_id of this Invocation.  # noqa: E501
        :type: str
        """

        self._vm_id = vm_id

    @property
    def ss_id(self):
        """Gets the ss_id of this Invocation.  # noqa: E501


        :return: The ss_id of this Invocation.  # noqa: E501
        :rtype: str
        """
        return self._ss_id

    @ss_id.setter
    def ss_id(self, ss_id):
        """Sets the ss_id of this Invocation.


        :param ss_id: The ss_id of this Invocation.  # noqa: E501
        :type: str
        """

        self._ss_id = ss_id

    @property
    def params(self):
        """Gets the params of this Invocation.  # noqa: E501


        :return: The params of this Invocation.  # noqa: E501
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Invocation.


        :param params: The params of this Invocation.  # noqa: E501
        :type: str
        """

        self._params = params

    @property
    def mincore(self):
        """Gets the mincore of this Invocation.  # noqa: E501


        :return: The mincore of this Invocation.  # noqa: E501
        :rtype: int
        """
        return self._mincore

    @mincore.setter
    def mincore(self, mincore):
        """Sets the mincore of this Invocation.


        :param mincore: The mincore of this Invocation.  # noqa: E501
        :type: int
        """

        self._mincore = mincore

    @property
    def mincore_size(self):
        """Gets the mincore_size of this Invocation.  # noqa: E501


        :return: The mincore_size of this Invocation.  # noqa: E501
        :rtype: int
        """
        return self._mincore_size

    @mincore_size.setter
    def mincore_size(self, mincore_size):
        """Sets the mincore_size of this Invocation.


        :param mincore_size: The mincore_size of this Invocation.  # noqa: E501
        :type: int
        """

        self._mincore_size = mincore_size

    @property
    def load_mincore(self):
        """Gets the load_mincore of this Invocation.  # noqa: E501


        :return: The load_mincore of this Invocation.  # noqa: E501
        :rtype: list[int]
        """
        return self._load_mincore

    @load_mincore.setter
    def load_mincore(self, load_mincore):
        """Sets the load_mincore of this Invocation.


        :param load_mincore: The load_mincore of this Invocation.  # noqa: E501
        :type: list[int]
        """

        self._load_mincore = load_mincore

    @property
    def use_mem_file(self):
        """Gets the use_mem_file of this Invocation.  # noqa: E501


        :return: The use_mem_file of this Invocation.  # noqa: E501
        :rtype: bool
        """
        return self._use_mem_file

    @use_mem_file.setter
    def use_mem_file(self, use_mem_file):
        """Sets the use_mem_file of this Invocation.


        :param use_mem_file: The use_mem_file of this Invocation.  # noqa: E501
        :type: bool
        """

        self._use_mem_file = use_mem_file

    @property
    def overlay_regions(self):
        """Gets the overlay_regions of this Invocation.  # noqa: E501


        :return: The overlay_regions of this Invocation.  # noqa: E501
        :rtype: bool
        """
        return self._overlay_regions

    @overlay_regions.setter
    def overlay_regions(self, overlay_regions):
        """Sets the overlay_regions of this Invocation.


        :param overlay_regions: The overlay_regions of this Invocation.  # noqa: E501
        :type: bool
        """

        self._overlay_regions = overlay_regions

    @property
    def use_ws_file(self):
        """Gets the use_ws_file of this Invocation.  # noqa: E501


        :return: The use_ws_file of this Invocation.  # noqa: E501
        :rtype: bool
        """
        return self._use_ws_file

    @use_ws_file.setter
    def use_ws_file(self, use_ws_file):
        """Sets the use_ws_file of this Invocation.


        :param use_ws_file: The use_ws_file of this Invocation.  # noqa: E501
        :type: bool
        """

        self._use_ws_file = use_ws_file

    @property
    def vmm_load_ws(self):
        """Gets the vmm_load_ws of this Invocation.  # noqa: E501


        :return: The vmm_load_ws of this Invocation.  # noqa: E501
        :rtype: bool
        """
        return self._vmm_load_ws

    @vmm_load_ws.setter
    def vmm_load_ws(self, vmm_load_ws):
        """Sets the vmm_load_ws of this Invocation.


        :param vmm_load_ws: The vmm_load_ws of this Invocation.  # noqa: E501
        :type: bool
        """

        self._vmm_load_ws = vmm_load_ws

    @property
    def enable_reap(self):
        """Gets the enable_reap of this Invocation.  # noqa: E501


        :return: The enable_reap of this Invocation.  # noqa: E501
        :rtype: bool
        """
        return self._enable_reap

    @enable_reap.setter
    def enable_reap(self, enable_reap):
        """Sets the enable_reap of this Invocation.


        :param enable_reap: The enable_reap of this Invocation.  # noqa: E501
        :type: bool
        """

        self._enable_reap = enable_reap

    @property
    def ws_file_direct_io(self):
        """Gets the ws_file_direct_io of this Invocation.  # noqa: E501


        :return: The ws_file_direct_io of this Invocation.  # noqa: E501
        :rtype: bool
        """
        return self._ws_file_direct_io

    @ws_file_direct_io.setter
    def ws_file_direct_io(self, ws_file_direct_io):
        """Sets the ws_file_direct_io of this Invocation.


        :param ws_file_direct_io: The ws_file_direct_io of this Invocation.  # noqa: E501
        :type: bool
        """

        self._ws_file_direct_io = ws_file_direct_io

    @property
    def ws_single_read(self):
        """Gets the ws_single_read of this Invocation.  # noqa: E501


        :return: The ws_single_read of this Invocation.  # noqa: E501
        :rtype: bool
        """
        return self._ws_single_read

    @ws_single_read.setter
    def ws_single_read(self, ws_single_read):
        """Sets the ws_single_read of this Invocation.


        :param ws_single_read: The ws_single_read of this Invocation.  # noqa: E501
        :type: bool
        """

        self._ws_single_read = ws_single_read

    @property
    def namespace(self):
        """Gets the namespace of this Invocation.  # noqa: E501


        :return: The namespace of this Invocation.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Invocation.


        :param namespace: The namespace of this Invocation.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Invocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Invocation):
            return True

        return self.to_dict() != other.to_dict()

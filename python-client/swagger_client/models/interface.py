# coding: utf-8

"""
    faasnap

    FaaSnap API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Interface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_dev_name': 'str',
        'iface_id': 'str',
        'guest_mac': 'str',
        'guest_addr': 'str',
        'unique_addr': 'str'
    }

    attribute_map = {
        'host_dev_name': 'host_dev_name',
        'iface_id': 'iface_id',
        'guest_mac': 'guest_mac',
        'guest_addr': 'guest_addr',
        'unique_addr': 'unique_addr'
    }

    def __init__(self, host_dev_name=None, iface_id=None, guest_mac=None, guest_addr=None, unique_addr=None, _configuration=None):  # noqa: E501
        """Interface - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._host_dev_name = None
        self._iface_id = None
        self._guest_mac = None
        self._guest_addr = None
        self._unique_addr = None
        self.discriminator = None

        if host_dev_name is not None:
            self.host_dev_name = host_dev_name
        if iface_id is not None:
            self.iface_id = iface_id
        if guest_mac is not None:
            self.guest_mac = guest_mac
        if guest_addr is not None:
            self.guest_addr = guest_addr
        if unique_addr is not None:
            self.unique_addr = unique_addr

    @property
    def host_dev_name(self):
        """Gets the host_dev_name of this Interface.  # noqa: E501


        :return: The host_dev_name of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._host_dev_name

    @host_dev_name.setter
    def host_dev_name(self, host_dev_name):
        """Sets the host_dev_name of this Interface.


        :param host_dev_name: The host_dev_name of this Interface.  # noqa: E501
        :type: str
        """

        self._host_dev_name = host_dev_name

    @property
    def iface_id(self):
        """Gets the iface_id of this Interface.  # noqa: E501


        :return: The iface_id of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._iface_id

    @iface_id.setter
    def iface_id(self, iface_id):
        """Sets the iface_id of this Interface.


        :param iface_id: The iface_id of this Interface.  # noqa: E501
        :type: str
        """

        self._iface_id = iface_id

    @property
    def guest_mac(self):
        """Gets the guest_mac of this Interface.  # noqa: E501


        :return: The guest_mac of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._guest_mac

    @guest_mac.setter
    def guest_mac(self, guest_mac):
        """Sets the guest_mac of this Interface.


        :param guest_mac: The guest_mac of this Interface.  # noqa: E501
        :type: str
        """

        self._guest_mac = guest_mac

    @property
    def guest_addr(self):
        """Gets the guest_addr of this Interface.  # noqa: E501


        :return: The guest_addr of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._guest_addr

    @guest_addr.setter
    def guest_addr(self, guest_addr):
        """Sets the guest_addr of this Interface.


        :param guest_addr: The guest_addr of this Interface.  # noqa: E501
        :type: str
        """

        self._guest_addr = guest_addr

    @property
    def unique_addr(self):
        """Gets the unique_addr of this Interface.  # noqa: E501


        :return: The unique_addr of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._unique_addr

    @unique_addr.setter
    def unique_addr(self, unique_addr):
        """Sets the unique_addr of this Interface.


        :param unique_addr: The unique_addr of this Interface.  # noqa: E501
        :type: str
        """

        self._unique_addr = unique_addr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Interface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Interface):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Interface):
            return True

        return self.to_dict() != other.to_dict()
